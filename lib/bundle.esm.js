function t(t){return Object.prototype.toString.call(t)}const n=n=>"[object Array]"===t(n);function e(t,n){if(!n)return null;if("string"==typeof n){const r=n.split("."),o=t[r[0]];if(1===r.length){if(o)return function(t){return"object"!=typeof t?t:JSON.parse(JSON.stringify(t))}(o)}else if(o&&"object"==typeof o){return e(o,r.splice(1).join("."))}}return null}const r=Symbol("injectValue");function o(n){return"[object Map]"===t(n)&&n.has(r)}function u(t){if(!o(t))return null;const n=t.get(r);return n||null}function c(r,i){if(!r||!i)return null;if("object"!=typeof r)return null;if("object"!=typeof i)return null;const l={};for(const f in i){const s=i[f];if("string"==typeof s&&(l[f]=e(r,s)),t(s),"[object Object]"===t(s)&&(l[f]=c(r,s)),n(s)){const t=s[0],n=s[1],o=e(r,t);l[f]=o.map((t=>n(t)))}o(s)&&(l[f]=u(s))}return Object.keys(l).length>0?l:null}export{c as dataToData,o as isInjectValue};
